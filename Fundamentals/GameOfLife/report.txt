// Molly Doyle
// Fundamentals of Computing - Lab 9 (Game of Life) 

	From the user’s perspective, this lab is meant to create an animation of Conway’s ‘Game of Life’ simulation. It functions by either prompting the user for cell coordinates or reading them in using the ifstream, then using the coordinates and the rules defined in the Game of Life article, to simulate how the cells would remain alive or die as they progressed across the grid. The user can customize the grid according to a menu of options that is presented to them at the beginning of the program. These options include adding a cell, removing a cell, advancing the simulation, quitting the program, and playing the game continuously. 
	From the programmers perspective, the program is a class with a header file, implementation file, and main file, along with a Makefile to run and clean the program. First, I created the header file. In this file, after including the necessary libraries and namespace, I defined const variables for SIZE, ALIVE, DEAD, and BLANK so that these variables would be accessible and consistent throughout the program. Next, I defined the Lifeboard class. I defined the Lifeboard() function and Lifeboard deconstructor, then defined the various functions that would be presented to the user in the menu, and used to manipulate the Lifeboard in the way desired by the user. All of these functions were defined as void. I also defined tmpboard and mainboard as private members of the class. 
Next, I wrote the program lifeboard.cpp which implemented the lifeboard.h file. At the start of this file, I included the necessary libraries and the ‘lifeboard.h’ header file. First, I defined Lifeboard(), which initialized each spaces in the mainboard and tmpboard as blank, using the const variable BLANK. Next, I defined the deconstructor. Then, displayBoard() which used the symbols +, -, and | to create the boundaries for the board. Next, I defined the functions addCell and removeCell, which gave the inputted cells the respective values of ALIVE and DEAD. Then, I defined the advance() function. In the function, the checkboard() function is used to find the amount of alive cells in contact with one another, then sets the mainboard at the desired location equal to the tmpboard at the desired location, then uses displayBoard() to display it. Finally, I defined the checkBoard function. This function began with nested for loops and if statements which determined the number of alive cells that are bordering one another. 
	To create the scene txt files, I used the Conway Game of Life wikipedia page https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life. I used different examples from the page which resulted in the desired behvaior of the program. 
 Using this found number, I used a series of if and else if statements to alter the found value an declare the locations on the board with ALIVE or DEAD values, based on the governing rules of Conway’s Game of Life. 
Finally, I wrote the program for the main file, life.cpp. In this file, I began by including all the necessary libraries and the header file. I then prototyped a function for the menu with a char parameter. Then, I wrote the main function that took the main function parameters arc and argv. In the main function, I first created and instance of the Lifeboard and int variables x and y that would be used through the program. Then, I created an if statement that would run the program in the case that argc =1. In this case, the menu function would be called and the users input choice would be read in. Using a switch case based on this value, the desired action would be enacted after prompting the user for their desired values for x and y. Then the corresponding functions, defined in the other class files, would be called so that the correct action would be taken. In the case that argc=2, the ifstream would be opened and would read in the inputted values, after ensuring that the values were valid. Then, using a while loop which ensures that the user wants to continue to run the program, a switch case is used to enact the desired actions according to user input by using the functions defined in the other class files. This file concludes with the definition of the menu function, which presents the user with possible choices to play in the game, and stores the users desired choice. 
I evaluated the program for correctness by running the program with each option and with various starting positions of cells in the grid and evaluating if their movement is as expected with the rules of the game. The program can produce incorrect results if the user enters unexpected input for the menu or for the x or y location values. 


